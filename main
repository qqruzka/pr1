#include <iostream>
#include <fstream>
#include <direct.h> // For _mkdir
#include "json.hpp"

using namespace std;
using json = nlohmann::json;

struct Node {
    string name;
    json data;
    Node* next;

    Node(const string& name) : name(name), next(nullptr) {}
};

struct Database {
    string filename; 
    string schema_name;
    Node* head;
    int current_pk; // Для хранения текущего значения PK

    Database() : head(nullptr), current_pk(0) {}

    ~Database() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void loadSchema(const string& schema_file) {
        ifstream file(schema_file);
        if (file) {
            json schema;
            file >> schema;
            schema_name = schema["name"];
            createDirectories(schema["structure"]);
            for (const auto& table : schema["structure"].items()) {
                addNode(table.key());
            }
        } else {
            cerr << "Could not open schema file." << endl;
        }
    }

    void initializePrimaryKey(const string& table) {
        string pk_filename = schema_name + "\\" + table + "\\table_pk_sequence.txt";
        ifstream pk_file(pk_filename);
        
        if (pk_file) {
            pk_file >> current_pk;
        } else {
            ofstream pk_file_out(pk_filename);
            if (pk_file_out) {
                pk_file_out << 0;
            } else {
                cerr << "Could not create primary key file: " << pk_filename << endl;
            }
        }
    }

    void updatePrimaryKey(const string& table) {
        string pk_filename = schema_name + "\\" + table + "\\table_pk_sequence.txt";
        ifstream pk_file(pk_filename);
        
        int pk_value = 0;
        if (pk_file) {
            pk_file >> pk_value;
        }
        pk_file.close();

        pk_value++;
        current_pk = pk_value;

        cout << "Updating PK file: " << pk_filename << " with new value: " << current_pk << endl;
        
        ofstream pk_file_out(pk_filename);
        if (pk_file_out) {
            pk_file_out << current_pk;
        } else {
            cerr << "Could not open primary key file for updating: " << pk_filename << endl;
        }
    }

    void createDirectories(const json& structure) {
        _mkdir(schema_name.c_str());

        for (const auto& table : structure.items()) {
            string table_name = table.key();
            string table_path = schema_name + "\\" + table_name;

            _mkdir(table_path.c_str());
            filename = table_path + "\\1.csv"; 

            ifstream check_file(filename);
            if (!check_file) {
                ofstream file(filename);
                if (file.is_open()) {
                    auto& columns = table.value();
                    for (size_t i = 0; i < columns.size(); ++i) {
                        file << "| " << setw(10) << left << columns[i].get<string>() << " ";
                    }
                    file << "|\n"; 
                    file.close();
                }
            }

            initializePrimaryKey(table_name);
        }
    }

    void addNode(const string& table_name) {
        Node* new_node = new Node(table_name);
        new_node->next = head;
        head = new_node;
    }

    Node* findNode(const string& table_name) {
        Node* current = head;
        while (current) {
            if (current->name == table_name) {
                return current;
            }
            current = current->next;
        }
        return nullptr;
    }

    void load() {
        Node* current = head;
        while (current) {
            filename = schema_name + "\\" + current->name + "\\1.csv"; 
            ifstream file(filename);
            if (file) {
                string line;
                bool is_header = true;
                while (getline(file, line)) {
                    line.erase(0, line.find_first_not_of(" \t"));
                    line.erase(line.find_last_not_of(" \t") + 1);

                    if (is_header) {
                        is_header = false;
                        continue;
                    }

                    istringstream iss(line);
                    string fields[4]; // Заменяем вектор на массив
                    int field_count = 0;

                    while (getline(iss, fields[field_count], '|') && field_count < 4) {
                        fields[field_count].erase(0, fields[field_count].find_first_not_of(" \t"));
                        fields[field_count].erase(fields[field_count].find_last_not_of(" \t") + 1);
                        field_count++;
                    }

                    if (field_count == 4) {
                        json entry;
                        entry["name"] = fields[0];
                        entry["age"] = fields[1];
                        entry["adress"] = fields[2];
                        entry["number"] = fields[3];

                        current->data.push_back(entry);
                    } else {
                        cout << "Invalid or empty data found: " << line << endl;
                    }
                }
            } else {
                cerr << "Could not open data file: " << filename << endl;
            }
            current = current->next;
        }
    }

    void select(const string& column, const string& table, const pair<string, string>* filters, int filter_count) {
        Node* table_node = findNode(table);
        if (table_node) {
            cout << "Data from " << column << " in " << table << ":\n";
            for (const auto& entry : table_node->data) {
                bool valid_row = true;

                for (int i = 0; i < filter_count; ++i) {
                    const string& filter_column = filters[i].first;
                    const string& filter_value = filters[i].second;

                    if (entry.contains(filter_column) && entry[filter_column].get<string>() != filter_value) {
                        valid_row = false;
                        break;
                    }
                }

                if (valid_row && entry.contains(column)) {
                    cout << entry[column].get<string>() << endl;
                }
            }
        } else {
            cout << "Table not found: " << table << endl;
        }
    }

    void saveSingleEntryToCSV(const string& table, const json& entry) {
        filename = schema_name + "\\" + table + "\\1.csv"; 
        ofstream file(filename, ios::app);
        if (file) {
            file << "| " << setw(10) << left << entry["name"].get<string>() << "| "  
                 << setw(10) << left << entry["age"] << "| "
                 << setw(10) << left << entry["adress"].get<string>() << "| "
                 << setw(10) << left << entry["number"].get<string>() << "|\n"; 
            cout << "Data saved successfully for: " << entry.dump() << endl;
        } else {
            cerr << "Could not open data file for saving: " << filename << endl;
        }
    }

    void insert(const string& table, json entry) {
        Node* table_node = findNode(table);
        if (table_node) {
            updatePrimaryKey(table);

            entry["id"] = current_pk;

            table_node->data.push_back(entry);
            cout << "Inserted: " << entry.dump() << endl;

            saveSingleEntryToCSV(table, entry); 
        } else {
            cout << "Table not found: " << table << endl;
        }
    }

    void deleteRow(const string& column, const string& value, const string& table) {
        Node* table_node = findNode(table);
        if (table_node) {
            json new_data = json::array();
            bool found = false;

            for (const auto& entry : table_node->data) {
                if (entry.contains(column) && entry[column].get<string>() == value) {
                    found = true;
                    cout << "Deleted row: " << entry.dump() << endl;
                } else {
                    new_data.push_back(entry);
                }
            }

            if (found) {
                table_node->data = new_data; 
                rewriteCSV(table); 
            } else {
                cout << "No row found with " << column << " = " << value << " in table " << table << endl;
            }
        } else {
            cout << "Table not found: " << table << endl;
        }
    }

    void rewriteCSV(const string& table) {
        filename = schema_name + "\\" + table + "\\1.csv"; 
        ofstream file(filename); 

        if (file) {
            Node* table_node = findNode(table);
            if (table_node) {
                json columns = {"name", "age", "adress", "number"};

                for (const auto& column : columns) {
                    file << "| " << setw(10) << left << column.get<string>() << " ";
                }
                file << "|\n"; 

                for (const auto& entry : table_node->data) {
                    for (const auto& column : columns) {
                        file << "| " << setw(10) << left << entry[column.get<string>()].get<string>() << " ";
                    }
                    file << "|\n"; 
                }
            }
            file.close();
        } else {
            cerr << "Could not open data file for rewriting: " << filename << endl;
        }
    }
};

void executeQuery(Database& db, const string& query) {
    istringstream iss(query);
    string action;
    iss >> action; 

    if (action == "INSERT" || action == "insert") {
        string table, name, adress, number;
        int age;
        iss >> table >> name >> age >> adress >> number; 
        json entry = {{"name", name}, {"age", age}, {"adress", adress}, {"number", number}};
        db.insert(table, entry); 
    } else if (action == "SELECT" || action == "select") {
        string column, from, table;
        iss >> column >> from >> table; 
        if (from == "FROM") {
            pair<string, string> filters[10]; // Заменяем вектор на массив фиксированного размера
            int filter_count = 0;
            string filter_part;

            if (iss >> filter_part && filter_part == "WHERE") {
                string filter_column, filter_value;
                while (iss >> filter_column) {
                    string condition;
                    iss >> condition; 
                    iss >> filter_value; 
                    filters[filter_count++] = make_pair(filter_column, filter_value);

                    string connector;
                    if (!(iss >> connector) || (connector != "AND" && connector != "OR")) {
                        break;
                    }
                }
            }
            db.select(column, table, filters, filter_count); 
        } else {
            cout << "Invalid query format." << endl;
        }
    } else if (action == "DELETE" || action == "delete") {
        string column, from, value, table;
        iss >> from >> table >> column >> value; 
        db.deleteRow(column, value, table); 
    } else {
        cout << "Unknown command: " << query << endl;
    }
}

int main(int argc, char* argv[]) {
    Database db;
    db.loadSchema("schema.json"); 
    db.load(); 

    if (argc > 2 && string(argv[1]) == "--query") {
        string query = argv[2]; 
        executeQuery(db, query); 
    } else {
        cout << "Please provide a query to execute in the format: --query \"<your_query>\"." << endl;
    }

    return 0;
}
